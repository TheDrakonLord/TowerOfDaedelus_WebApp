<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="audioFileNotFound" xml:space="preserve">
    <value>File does not exist.</value>
  </data>
  <data name="audioNoPlaybackError" xml:space="preserve">
    <value>Error: nothing is currently playing</value>
  </data>
  <data name="botStatusSet" xml:space="preserve">
    <value>The bot status has been changed</value>
  </data>
  <data name="catAdminTrigger" xml:space="preserve">
    <value>Admin Command triggered</value>
  </data>
  <data name="catCmdTrigger" xml:space="preserve">
    <value>Command triggered</value>
  </data>
  <data name="catError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="cmdCodesNull" xml:space="preserve">
    <value>codes()</value>
  </data>
  <data name="cmdCodesUser" xml:space="preserve">
    <value>codes(Username)</value>
  </data>
  <data name="cmdDowntimeStart" xml:space="preserve">
    <value>startbotdowntime</value>
  </data>
  <data name="cmdEvents" xml:space="preserve">
    <value>events</value>
  </data>
  <data name="cmdHelp" xml:space="preserve">
    <value>help</value>
  </data>
  <data name="cmdIAm" xml:space="preserve">
    <value>iam</value>
  </data>
  <data name="cmdMaint" xml:space="preserve">
    <value>maint</value>
  </data>
  <data name="cmdMyCode" xml:space="preserve">
    <value>myCode</value>
  </data>
  <data name="cmdMyCodes" xml:space="preserve">
    <value>myCodes</value>
  </data>
  <data name="cmdNewEvent" xml:space="preserve">
    <value>newEvent</value>
  </data>
  <data name="cmdPatchNotes" xml:space="preserve">
    <value>patchNotes</value>
  </data>
  <data name="cmdRSVP" xml:space="preserve">
    <value>rsvp</value>
  </data>
  <data name="cmdSetEventTarget" xml:space="preserve">
    <value>setEventTarget</value>
  </data>
  <data name="cmdSetMaint" xml:space="preserve">
    <value>setmaint</value>
  </data>
  <data name="cmdSetStatus" xml:space="preserve">
    <value>setStatus</value>
  </data>
  <data name="cmdSetTarget" xml:space="preserve">
    <value>setTarget</value>
  </data>
  <data name="cmdShowAllPatchNotes" xml:space="preserve">
    <value>showAllPatchNotes</value>
  </data>
  <data name="cmdShowEvent" xml:space="preserve">
    <value>showEvent</value>
  </data>
  <data name="cmdWhoAmI" xml:space="preserve">
    <value>whoami</value>
  </data>
  <data name="cmdWhoIs" xml:space="preserve">
    <value>whois</value>
  </data>
  <data name="codePlatformError" xml:space="preserve">
    <value>Error: no platform found with that name. It is either misspelt or unsupported</value>
  </data>
  <data name="codeSuccess" xml:space="preserve">
    <value>Code successfully added</value>
  </data>
  <data name="errorCmdDataMissing" xml:space="preserve">
    <value>Notice: Command Data was not found. A new command data file will be created</value>
  </data>
  <data name="errorEventExists" xml:space="preserve">
    <value>Error: An active event with that name already exists, choose a different name, delete the exisiting event, or wait for the existing event to pass</value>
  </data>
  <data name="errorEventNotFound" xml:space="preserve">
    <value>No event found</value>
  </data>
  <data name="errorEventTrigger" xml:space="preserve">
    <value>Error: event trigger failed</value>
  </data>
  <data name="errorMissingChar" xml:space="preserve">
    <value>Error: No Character Found</value>
  </data>
  <data name="errorTokenMissing" xml:space="preserve">
    <value>error no token file found</value>
  </data>
  <data name="eventAnnounceSet" xml:space="preserve">
    <value>This channel will now recieve event announcments.</value>
  </data>
  <data name="exceptionEventTrigger" xml:space="preserve">
    <value>Exception thrown--event trigger</value>
  </data>
  <data name="exceptionNoCmd" xml:space="preserve">
    <value>Exception thrown--invalidOperationException--No command found</value>
  </data>
  <data name="helpFooter" xml:space="preserve">
    <value>Legend: &lt;required&gt; [optional]</value>
  </data>
  <data name="logAppStart" xml:space="preserve">
    <value>Application Start</value>
  </data>
  <data name="logAudioDownload" xml:space="preserve">
    <value>Begin video download</value>
  </data>
  <data name="logAudioPlayback" xml:space="preserve">
    <value>begin video playback</value>
  </data>
  <data name="logBotReady" xml:space="preserve">
    <value>Bot Ready</value>
  </data>
  <data name="logErrorEventExists" xml:space="preserve">
    <value>Event already exists</value>
  </data>
  <data name="logRefreshSkip" xml:space="preserve">
    <value>News refresh skipped due to lodestone maintenance</value>
  </data>
  <data name="maintAddSuccess" xml:space="preserve">
    <value>Maitenance has successfully been added</value>
  </data>
  <data name="msgCharDisplay" xml:space="preserve">
    <value>Displaying Character</value>
  </data>
  <data name="msgCharSave" xml:space="preserve">
    <value>Saving Character</value>
  </data>
  <data name="msgDisplayAllEvents" xml:space="preserve">
    <value>Displaying All Events</value>
  </data>
  <data name="msgEventCreated" xml:space="preserve">
    <value>Event Created</value>
  </data>
  <data name="msgEventNotFound" xml:space="preserve">
    <value>Error: no event found with that name</value>
  </data>
  <data name="msgFieldNotFound" xml:space="preserve">
    <value>Error: No field found with that name</value>
  </data>
  <data name="msgHelp" xml:space="preserve">
    <value>Displaying Help</value>
  </data>
  <data name="msgHelpSpecific" xml:space="preserve">
    <value>Displaying Help on a specific command</value>
  </data>
  <data name="msgNoCurrentMaint" xml:space="preserve">
    <value>There is no upcoming maintenence currently</value>
  </data>
  <data name="msgPatchNotes" xml:space="preserve">
    <value>Displaying Patch Notes</value>
  </data>
  <data name="msgRepeat" xml:space="preserve">
    <value>Advanced date based on repeat</value>
  </data>
  <data name="msgShowEvent" xml:space="preserve">
    <value>Displaying Event</value>
  </data>
  <data name="msgUnkownError" xml:space="preserve">
    <value>Error: An unknown error has occured</value>
  </data>
  <data name="noVoiceChannelError" xml:space="preserve">
    <value>User must be in a voice channel, or a voice channel must be passed as an argument.</value>
  </data>
  <data name="utilityAnnounceSet" xml:space="preserve">
    <value>This channel will now recieve utility announcments.</value>
  </data>
</root>